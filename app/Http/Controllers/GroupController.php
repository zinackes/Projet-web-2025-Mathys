<?php

namespace App\Http\Controllers;

use App\Models\Group;
use App\Models\User;
use App\Models\UserCohort;
use App\Models\UserGroup;
use Illuminate\Contracts\View\Factory;
use Illuminate\Contracts\View\View;
use Illuminate\Foundation\Application;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use App\Services\MistralService;
use Illuminate\Support\Str;

class GroupController extends Controller
{
    /**
     * Display the page
     *
     * @return Factory|View|Application|object
     */
    public function index() {
        return view('pages.groups.index');
    }

    public function store(Request $request, MistralService $mistral)
    {

        $cohortId = $request->cohort_id;

        $studentsInCohort = UserCohort::where('cohort_id', $cohortId)->get();
        $studentIds = $studentsInCohort->pluck('user_id');
        $students = User::whereIn('id', $studentIds)->get();

        $studentsGroups = UserGroup::whereIn('user_id', $studentIds)->get();
        $studentsInGroupsIds = $studentsGroups->pluck('user_id');

        $studentsInGroups = User::whereIn('id', $studentsInGroupsIds)->get();

        $studentsJson = json_encode($students->toArray(), JSON_PRETTY_PRINT);

        $studentsInGroupsJson = json_encode($studentsGroups->toArray(), JSON_PRETTY_PRINT);


        $maxGroupPossible = $request->numberUsersInGroups/$request->numberGroup;


        $rules = [
            'numberGroup' => "required|integer|min:1|max:{$students->count()}",
            'numberUsersInGroups' => 'required|integer|min:1',
        ];


        $messages = [
            'numberGroup.required' => 'Le nombre de groupes est obligatoire.',
            'numberGroup.integer' => 'Le nombre de groupes doit Ãªtre un entier.',
            'numberGroup.min' => 'Le nombre de groupes doit Ãªtre d\'au moins 1.',

            'numberUsersInGroups.required' => 'Le nombre d\'utilisateurs par groupe est obligatoire.',
            'numberUsersInGroups.integer' => 'Le nombre d\'utilisateurs par groupe doit Ãªtre un entier.',
            'numberUsersInGroups.min' => 'Le nombre d\'utilisateurs par groupe doit Ãªtre d\'au moins 1.',
        ];


        if($request->numberUsersInGroups) {
            if($request->numberGroup <= $maxGroupPossible){
                $rules['numberGroup'] .= "|max:{$maxGroupPossible}";
                $messages['numberGroup.max'] = "Le nombre de groupes ne peut pas Ãªtre supÃ©rieur au ratio d'Ã©tudiants ({$maxGroupPossible}).";
            }
        }
        else{
            $rules['numberGroup'] .= "|max:0";
            $messages['numberGroup.max'] = "Il est nÃ©cessaire d'avoir un nombres d'eleves par groupes.";
        }




        $request->validate($rules, $messages);


        $prompt = "
Vous Ãªtes un moteur de calcul ultra strict.

Voici votre mission :

1. Vous recevez ci-dessous la liste UNIQUE et DÃ‰FINITIVE des Ã©tudiants pour la promotion \"{$studentsJson}\".
   Chaque Ã©tudiant est reprÃ©sentÃ© par :
   - \\\"id\\\" (identifiant entier unique)
   - \\\"last_name\\\" (string)
   - \\\"first_name\\\" (string)
   - \\\"grade\\\" (moyenne sur 20, double)

2. Vous devez OBLIGATOIREMENT utiliser tous ces Ã©tudiants, exactement tels qu'ils sont fournis, sans inventer, modifier ou ignorer aucun d'entre eux.

3. Votre objectif :
   - Former exactement {$request->numberGroup} groupes.
   - Chaque groupe doit contenir idÃ©alement {$request->numberUsersInGroups} Ã©tudiants.
   - Si le nombre exact n'est pas atteignable, rÃ©partir Ã©quitablement les Ã©lÃ¨ves supplÃ©mentaires en respectant l'Ã©quilibre gÃ©nÃ©ral.

4. RÃ©partition par note moyenne :
   - RÃ©partir les Ã©tudiants de faÃ§on Ã  ce que la moyenne des \\\"grade\\\" des Ã©tudiants de chaque groupe soit la plus homogÃ¨ne possible entre tous les groupes.
   - Les Ã©carts entre les moyennes de groupes doivent Ãªtre minimisÃ©s.

5. Calcul :
   - La moyenne de chaque groupe (\\\"moyenne_groupe\\\") doit Ãªtre calculÃ©e avec la formule exacte :
     (somme des grades du groupe) Ã· (nombre d'Ã©tudiants du groupe)
   - Le rÃ©sultat doit Ãªtre un nombre flottant avec 2 dÃ©cimales de prÃ©cision.

Si une seule de ces rÃ¨gles est violÃ©e (ajout d'un Ã©lÃ¨ve inventÃ©, mauvaise moyenne, Ã©lÃ¨ve manquant, etc.), le rÃ©sultat sera invalide.

---

Contrainte supplÃ©mentaire :

- Vous devez utiliser l'historique des anciennes paires fournies ci-dessous.
- Ã‰vitez au maximum que deux Ã©tudiants ayant dÃ©jÃ  Ã©tÃ© dans le mÃªme groupe se retrouvent ensemble Ã  nouveau.
- Si ce n'est pas totalement Ã©vitable, minimisez le nombre de rÃ©pÃ©titions au maximum.

Anciennes paires d'Ã©tudiants (id1, id2) :
{$studentsInGroupsJson}

---

RÃ©pondez uniquement avec un JSON strictement conforme Ã  cette structure (sans aucun texte avant, aprÃ¨s ou autour) :

[
  {
    \"group_id\": 0,
    \"students\": [
      {
        \"id\": 10,
        \"first_name\": \"Frank\",
        \"last_name\": \"Moore\",
        \"email\": \"frank.moore@codingfactory.com\",
        \"grade\": 7
      },
      ...
    ]
  },
  ...
]

ðŸš¨ RÃ©ponds uniquement avec ce JSON final. Pas de texte. Pas de commentaire. Pas de langage naturel. Juste le JSON.
";




        $responseText = $mistral->generateText($prompt);

        if (preg_match('/```json(.*?)```/s', $responseText, $matches)) {
            $jsonString = trim($matches[1]);
        } else {
            $jsonString = trim($responseText);
        }

        $decoded = json_decode($jsonString, true);

        if (json_last_error() === JSON_ERROR_NONE) {
            return view('pages.groups.promptResult', [
                'groups' => $decoded,
                'studentsInGroups' => $studentsInGroups,
                'project_name' => $request->project_name
            ]);
        } else {
            // Erreur de dÃ©codage JSON
            return response()->json([
                'error' => 'Erreur lors du dÃ©codage JSON : ' . json_last_error_msg(),
                'jsonString' => $jsonString
            ]);
        }

    }


    public function promptResult(){

        return view('pages.groups.promptResult');
    }
}
